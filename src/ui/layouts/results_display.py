import dash_bootstrap_components as dbc
from dash import dcc, html
from typing import List
import logging

logger = logging.getLogger(__name__)

# Keep individual chart/table creation functions as they are used to build panels

def create_portfolio_value_returns_chart() -> dbc.Card:
    """
    Creates the card containing the portfolio value/returns chart and toggle buttons.
    Labels updated to USD / %.
    """
    logger.debug("Creating portfolio value/returns chart card structure.")
    return dbc.Card([
        dbc.CardHeader(
            dbc.Row([
                dbc.Col("Portfolio Performance", width="auto"),
                dbc.Col(
                    dbc.ButtonGroup([
                        # --- UPDATED LABELS ---
                        dbc.Button("USD", id="btn-chart-value", color="primary", outline=False, size="sm", n_clicks=0),
                        dbc.Button("%", id="btn-chart-returns", color="primary", outline=True, size="sm", n_clicks=0),
                        # --- END UPDATED LABELS ---
                    ], size="sm"),
                    width="auto"
                )
            ], justify="between", align="center")
        ),
        dbc.CardBody([
            dcc.Loading(
                id="portfolio-chart-loading",
                children=dcc.Graph(
                    id="portfolio-chart",
                    # config={'displayModeBar': False} # Optional: hide mode bar
                ),
                type="circle"
            )
        ])
    ], className="mb-3") # Use mb-3 for tighter spacing in vertical stack

def create_drawdown_chart() -> dbc.Card:
    """
    Creates the card containing the drawdown chart.
    """
    logger.debug("Creating drawdown chart card structure.")
    return dbc.Card([
        dbc.CardHeader("Drawdown"),
        dbc.CardBody([
            dcc.Loading(
                id="drawdown-chart-loading", # Unique ID for drawdown loading
                children=dcc.Graph(
                    id="drawdown-chart",
                    # config={'displayModeBar': False}
                ),
                type="circle"
            )
        ])
    ], className="mb-3") # Use mb-3

def create_monthly_returns_heatmap() -> dbc.Card:
    """
    Creates the card containing the monthly returns heatmap.
    """
    logger.debug("Creating monthly returns heatmap card structure.")
    return dbc.Card([
        dbc.CardHeader("Monthly Returns Heatmap"),
        dbc.CardBody([
            dcc.Loading(
                id="heatmap-chart-loading", # Corrected ID
                children=dcc.Graph(
                    id="monthly-returns-heatmap",
                    # config={'displayModeBar': False}
                ),
                type="circle"
            )
        ])
    ], className="mb-3") # Use mb-3

def create_trades_table() -> dbc.Card:
    """
    Creates card with a container for the trades table.
    The table itself will be generated by a callback.
    """
    logger.debug("Creating trades table card structure.")
    return dbc.Card([
        dbc.CardHeader("Trade History"),
        dbc.CardBody([
            dcc.Loading(
                id="trades-table-loading", # Corrected ID
                # The children here will be replaced by the update_trades_table callback
                # We need a container for the DataTable
                children=html.Div(id="trades-table-container", children=[
                    # Placeholder or initial message
                    html.Div("Run a backtest to view trade history.")
                ]),
                type="circle"
            )
        ])
    ], className="mb-3") # Use mb-3

def create_signals_chart() -> dbc.Card:
    """
    Creates the card containing the signals chart and ticker selector.
    """
    logger.debug("Creating signals chart card structure.")
    return dbc.Card([
        dbc.CardHeader(
            dbc.Row([
                dbc.Col("Signals & Price Action", width="auto"),
                dbc.Col(
                    dbc.Select(
                        id="ticker-selector",
                        options=[], # Populated by callback
                        placeholder="Select Ticker...",
                        size="sm"
                    ),
                    width=4 # Adjust width as needed
                )
            ], justify="between", align="center")
        ),
        dbc.CardBody([
            dcc.Loading(
                id="signals-chart-loading",
                children=dcc.Graph(
                    id="signals-chart",
                    # config={'displayModeBar': False}
                ),
                type="circle"
            )
        ])
    ], className="mb-3") # Use mb-3


# --- NEW: Center Panel Layout ---
def create_center_panel_layout() -> html.Div:
    """
    Creates the layout for the center panel containing all charts and the table.
    Arranges components vertically as requested.
    """
    logger.debug("Creating center panel layout.")
    return html.Div([
        create_portfolio_value_returns_chart(),
        create_drawdown_chart(),
        create_monthly_returns_heatmap(),
        create_signals_chart(),
        create_trades_table()
    ])

# --- NEW: Right Panel Layout ---
def create_right_panel_layout() -> html.Div:
    """
    Creates the layout for the right panel containing performance and trade metrics.
    Uses two cards with specific IDs for callback targeting.
    """
    logger.debug("Creating right panel layout.")
    return html.Div([
        dbc.Card([
            dbc.CardHeader("Performance Overview"),
            dbc.CardBody(
                # Container for performance metrics, populated by callback
                # Use g-2 for smaller gutters between metric cards
                dbc.Row(id="performance-metrics-container", className="g-2")
            )
        ], className="mb-3"),

        dbc.Card([
            dbc.CardHeader("Trade Statistics"),
            dbc.CardBody(
                # Container for trade statistics, populated by callback
                # Use g-2 for smaller gutters between metric cards
                dbc.Row(id="trade-metrics-container", className="g-2")
            )
        ], className="mb-3")
    ])