import dash_bootstrap_components as dbc
from dash import dcc, html
from typing import List
import logging
# Import centralized IDs
from src.ui import ids as app_ids
from src.ui.ids.ids import SharedComponentIDs

logger = logging.getLogger(__name__)

# Keep individual chart/table creation functions as they are used to build panels

def create_portfolio_value_returns_chart() -> dbc.Card:
    """
    Creates the card containing the portfolio value/returns chart and toggle buttons.
    """
    logger.debug("Creating portfolio value/returns chart card structure with Row/Col and flex-nowrap.")
    return dbc.Card([
        dbc.CardHeader(
            dbc.Row(
                [
                    dbc.Col(
                        html.H4("Portfolio Value", className="card-title mb-0"), 
                        width="auto"
                    ),
                    dbc.Col(
                        html.Span("in"), 
                        width="auto", 
                        className="px-1" # Adds padding left and right of "in" for spacing
                    ),
                    dbc.Col(
                        dbc.ButtonGroup(
                            [
                                dbc.Button(
                                    "USD",
                                    id=app_ids.ResultsIDs.PORTFOLIO_VALUE_CURRENCY_USD,
                                    className="py-0 px-1", # Small padding
                                    color="primary",
                                    outline=False, # Active by default
                                    size="sm",
                                    n_clicks=0
                                ),
                                dbc.Button(
                                    "%",
                                    id=app_ids.ResultsIDs.PORTFOLIO_VALUE_CURRENCY_PERCENT,
                                    className="py-0 px-1", # Small padding
                                    color="primary",
                                    outline=True,
                                    size="sm",
                                    n_clicks=0
                                ),
                            ],
                            size="sm"
                        ),
                        width="auto"
                    )
                ],
                align="center", # Vertically aligns items (columns) within the Row
                className="gx-2 flex-nowrap"  # gx-2 for horizontal gutters, flex-nowrap to prevent wrapping
            )
        ),
        dbc.CardBody([
            dcc.Loading(
                id=app_ids.ResultsIDs.PORTFOLIO_CHART_LOADING, 
                children=[
                    dcc.Graph(id=app_ids.ResultsIDs.PORTFOLIO_CHART)
                ],
                type="circle"
            )
        ])
    ], className="mb-1")

def create_drawdown_chart() -> dbc.Card:
    """
    Creates the card containing the drawdown chart.
    Now uses the dedicated drawdown chart from VisualizationService.
    """
    logger.debug("Creating drawdown chart card structure.")
    return dbc.Card([
        dbc.CardHeader(html.Span(["Drawdown ", html.Span("(%)", style={"fontWeight": "normal"})]), className="card-title-text"), # Corrected: "font-weight" to "fontWeight"
        dbc.CardBody([
            dcc.Loading(
                id=app_ids.ResultsIDs.DRAWDOWN_CHART_LOADING, 
                children=dcc.Graph(
                    id=app_ids.ResultsIDs.DRAWDOWN_CHART, # This ID will be targeted by a callback that sets the figure
                ),
                type="circle"
            )
        ])
    ], className="mb-1")

def create_monthly_returns_heatmap() -> dbc.Card:
    """
    Creates the card containing the monthly returns heatmap.
    """
    logger.debug("Creating monthly returns heatmap card structure.")
    return dbc.Card([
        dbc.CardHeader("Monthly Returns Heatmap", className="card-title-text"), # Added className
        dbc.CardBody([
            dcc.Loading(
                id=app_ids.ResultsIDs.MONTHLY_RETURNS_HEATMAP_LOADING, # Corrected ID
                children=dcc.Graph(
                    id=app_ids.ResultsIDs.MONTHLY_RETURNS_HEATMAP,
                ),
                type="circle"
            )
        ])
    ], className="mb-1") # Use mb-1

def create_trades_table() -> dbc.Card:
    """
    Creates card with a container for the trades table (dash_table.DataTable).
    The table itself will be generated by a callback.
    """
    logger.debug("Creating trades table card structure.")
    return dbc.Card([
        dbc.CardHeader("Trade History", className="card-title-text"), # Added className
        dbc.CardBody([
            dcc.Loading(
                id=app_ids.ResultsIDs.TRADES_TABLE_LOADING, # Corrected ID
                # Container for the DataTable, populated by the callback
                children=html.Div(id=app_ids.ResultsIDs.TRADES_TABLE_CONTAINER, children=[
                    # Initial placeholder message
                    html.Div("Run a backtest to view trade history.")
                ]),
                type="circle"
            )
        ])
    ], className="mb-1") # Use mb-1

def create_signals_chart() -> dbc.Card:
    """
    Creates the card containing the signals chart and ticker selector.
    """
    logger.debug("Creating signals chart card structure.")
    return dbc.Card([
        dbc.CardHeader(
            dbc.Row([
                dbc.Col("Signals & Price Action", width="auto", className="card-title-text"), # Added className
                dbc.Col(
                    dbc.Select(
                        id=app_ids.ResultsIDs.SIGNALS_TICKER_SELECTOR,
                        options=[], # Populated by callback
                        placeholder="Select Ticker...",
                        size="sm"
                    ),
                    width=4 # Adjust width as needed
                )
            ], justify="between", align="center")
        ),
        dbc.CardBody([
            dcc.Loading(
                id=app_ids.ResultsIDs.SIGNALS_CHART_LOADING,
                children=dcc.Graph(
                    id=app_ids.ResultsIDs.SIGNALS_CHART,
                ),
                type="circle"
            )
        ])
    ], className="mb-1") # Use mb-1

# Removed create_status_and_progress_bar - moved to loading_overlay.py

# --- NEW: Center Panel Layout ---
def create_center_panel_layout() -> html.Div:
    """
    Creates the layout for the center panel containing all charts and the table.
    Arranges components vertically as requested.
    """
    logger.debug("Creating center panel layout.")
    return html.Div([
        # New div to wrap actual results
        html.Div(id=app_ids.ResultsIDs.RESULTS_AREA_WRAPPER, children=[
            create_portfolio_value_returns_chart(),
            create_drawdown_chart(),
            create_monthly_returns_heatmap(),
            create_signals_chart(),
            create_trades_table()
        ], style={'display': 'none'}) # Initially hidden
    ])

# --- NEW: Right Panel Layout ---
def create_right_panel_layout() -> html.Div:
    """
    Creates the layout for the right panel containing performance and trade metrics.
    Uses two cards with specific IDs for callback targeting.
    """
    logger.debug("Creating right panel layout.")
    return html.Div([
        dbc.Card([
            dbc.CardHeader("Performance Overview", className="card-title-text"), # Added className
            dbc.CardBody(
                # Container for performance metrics, populated by callback
                # Use g-2 for smaller gutters between metric cards
                dbc.Row(id=app_ids.ResultsIDs.PERFORMANCE_METRICS_CONTAINER, className="g-2")
            )
        ], className="mb-1"),

        dbc.Card([
            dbc.CardHeader("Trade Statistics", className="card-title-text"), # Added className
            dbc.CardBody(
                # Container for trade statistics, populated by callback
                # Use g-2 for smaller gutters between metric cards
                dbc.Row(id=app_ids.ResultsIDs.TRADE_METRICS_CONTAINER, className="g-2")
            )
        ], className="mb-1")
    ])

def create_main_results_area() -> html.Div:
    """
    Creates the main area where all results (charts, tables, metrics) will be displayed.
    """
    logger.debug("Creating main results display area.")
    return html.Div(
        id=app_ids.ResultsIDs.RESULTS_AREA_WRAPPER, # Corrected: Access via ResultsIDs class
        children=[
            dbc.Row([
                dbc.Col(
                    create_center_panel_layout(), 
                    id=app_ids.ResultsIDs.CENTER_PANEL_COLUMN, 
                    width=12, lg=8, 
                    className="mb-3 mb-lg-0"
                ),
                dbc.Col(
                    create_right_panel_layout(), 
                    id=app_ids.ResultsIDs.RIGHT_PANEL_COLUMN, 
                    width=12, lg=4
                ),
            ])
        ],
        style={"display": "none"}  # Initially hidden, shown after backtest
    )