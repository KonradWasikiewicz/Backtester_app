import dash_bootstrap_components as dbc
from dash import dcc, html
from typing import List
import logging

logger = logging.getLogger(__name__)

def create_overview_metrics(metrics_ids: List[str], header: str = "Performance Overview") -> dbc.Card:
    """
    Creates the card structure for displaying overview metrics.
    The actual metric values will be populated by a callback.

    Args:
        metrics_ids: List of IDs for the metrics to be displayed (used by callback).
        header: The title for the card header.

    Returns:
        dbc.Card: Card component containing the metrics layout.
    """
    logger.debug(f"Creating overview metrics card structure for IDs: {metrics_ids}")
    # The Row inside CardBody will be targeted by the callback to insert metric cards
    return dbc.Card([
        dbc.CardHeader(header),
        dbc.CardBody([
            # This Row is the target for the update_metrics_display callback
            dbc.Row(
                [], # Initially empty, populated by update_metrics_display
                id="metrics-summary-container", # Ensure this ID exists and is targeted
                className="g-3" # Add gutters between metric cards
            )
        ])
    ], className="mb-4")

def create_portfolio_value_returns_chart() -> dbc.Card:
    """
    Creates the card containing the portfolio value/returns chart and toggle buttons.

    Returns:
        dbc.Card: Card component with the chart placeholder and buttons.
    """
    logger.debug("Creating portfolio value/returns chart card structure.")
    return dbc.Card([
        dbc.CardHeader(
            dbc.Row([
                dbc.Col("Portfolio Performance", width="auto"),
                dbc.Col(
                    dbc.ButtonGroup([
                        dbc.Button("Value", id="btn-chart-value", color="primary", outline=False, size="sm", n_clicks=0),
                        dbc.Button("Returns", id="btn-chart-returns", color="primary", outline=True, size="sm", n_clicks=0),
                    ], size="sm"),
                    width="auto"
                )
            ], justify="between", align="center")
        ),
        dbc.CardBody([
            dcc.Loading(
                id="portfolio-chart-loading",
                children=dcc.Graph(
                    id="portfolio-chart",
                    # config={'displayModeBar': False} # Optional: hide mode bar
                ),
                type="circle"
            )
        ])
    ], className="mb-4")

def create_drawdown_chart() -> dbc.Card:
    """
    Creates the card containing the drawdown chart.

    Returns:
        dbc.Card: Card component with the drawdown chart placeholder.
    """
    logger.debug("Creating drawdown chart card structure.")
    return dbc.Card([
        dbc.CardHeader("Drawdown"),
        dbc.CardBody([
            dcc.Loading(
                id="drawdown-chart-loading", # Unique ID for drawdown loading
                children=dcc.Graph(
                    id="drawdown-chart",
                    # config={'displayModeBar': False}
                ),
                type="circle"
            )
        ])
    ], className="mb-4")

def create_monthly_returns_heatmap() -> dbc.Card:
    """
    Creates the card containing the monthly returns heatmap.

    Returns:
        dbc.Card: Card component with the heatmap placeholder.
    """
    logger.debug("Creating monthly returns heatmap card structure.")
    return dbc.Card([
        dbc.CardHeader("Monthly Returns Heatmap"),
        dbc.CardBody([
            dcc.Loading(
                id="heatmap-chart-loading", # Corrected ID
                children=dcc.Graph(
                    id="monthly-returns-heatmap",
                    # config={'displayModeBar': False}
                ),
                type="circle"
            )
        ])
    ], className="mb-4")

def create_trades_table() -> dbc.Card:
    """
    Creates card with a container for the trades table.
    The table itself will be generated by a callback.

    Returns:
        dbc.Card: Card component with trades data table container.
    """
    logger.debug("Creating trades table card structure.")
    return dbc.Card([
        dbc.CardHeader("Trade History"),
        dbc.CardBody([
            dcc.Loading(
                id="trades-table-loading", # Corrected ID
                # The children here will be replaced by the update_trades_table callback
                # We need a container for the DataTable
                children=html.Div(id="trades-table-container", children=[
                    # Placeholder or initial message
                    html.Div("Run a backtest to view trade history.") 
                ]),
                type="circle"
            )
        ])
    ], className="mb-4")

def create_signals_chart() -> dbc.Card:
    """
    Creates the card containing the signals chart and ticker selector.

    Returns:
        dbc.Card: Card component with the signals chart placeholder and selector.
    """
    logger.debug("Creating signals chart card structure.")
    return dbc.Card([
        dbc.CardHeader(
            dbc.Row([
                dbc.Col("Signals & Price Action", width="auto"),
                dbc.Col(
                    dbc.Select(
                        id="ticker-selector",
                        options=[], # Populated by callback
                        placeholder="Select Ticker...",
                        size="sm"
                    ),
                    width=4 # Adjust width as needed
                )
            ], justify="between", align="center")
        ),
        dbc.CardBody([
            dcc.Loading(
                id="signals-chart-loading",
                children=dcc.Graph(
                    id="signals-chart",
                    # config={'displayModeBar': False}
                ),
                type="circle"
            )
        ])
    ], className="mb-4")

def create_no_results_placeholder() -> html.Div:
    """
    Creates a placeholder message to display when no backtest results are available.

    Returns:
        html.Div: Placeholder component.
    """
    logger.debug("Creating 'no results' placeholder.")
    return html.Div([
        html.I(className="fas fa-chart-line fa-3x text-muted mb-3"),
        html.H5("No Backtest Results Yet", className="text-muted"),
        html.P("Configure and run a backtest to see the results here.", className="text-muted")
    ], className="text-center py-5", id="no-results-placeholder") # Added ID for clarity

# --- NEW FUNCTION --- 
def create_full_results_layout() -> html.Div:
    """
    Creates the complete layout structure for displaying all backtest results.
    This includes placeholders for metrics, charts, and tables.
    """
    logger.debug("Creating full results layout structure.")
    # Define which metrics to show in the overview
    overview_metric_ids = [
        "starting-balance", "ending-balance", "total-return", "cagr",
        "sharpe", "max-drawdown", "calmar-ratio", "recovery-factor",
        "trades-count", "win-rate", "profit-factor", "avg-trade",
        "signals-generated", "rejected-signals-total"
    ]
    
    return html.Div([
        # Row 1: Overview Metrics
        dbc.Row([
            dbc.Col(create_overview_metrics(overview_metric_ids), width=12)
        ]),
        # Row 2: Portfolio Chart and Drawdown Chart
        dbc.Row([
            dbc.Col(create_portfolio_value_returns_chart(), lg=8, className="mb-4"),
            dbc.Col(create_drawdown_chart(), lg=4, className="mb-4")
        ]),
        # Row 3: Heatmap and Signals Chart
        dbc.Row([
            dbc.Col(create_monthly_returns_heatmap(), lg=6, className="mb-4"),
            dbc.Col(create_signals_chart(), lg=6, className="mb-4")
        ]),
        # Row 4: Trades Table
        dbc.Row([
            dbc.Col(create_trades_table(), width=12)
        ])
    ], id="results-content-area") # Add ID to the main container

def create_results_section() -> html.Div:
    """
    Creates the results display section, initially showing a placeholder
    wrapped in a Loading component.
    The Loading component's children will be updated by a callback.
    """
    logger.debug("Creating initial results section with placeholder.")
    return html.Div([
        # Loading component wraps the area where results or placeholder will appear
        dcc.Loading(
            id="results-loading", # ID for the Loading component itself
            type="circle",
            # Initially show the placeholder. This will be replaced by the update_results_area callback.
            children=create_no_results_placeholder(), 
            className="main-loader-fullscreen" # Optional: style the loader
        )
    ])