import dash_bootstrap_components as dbc
from dash import dcc, html
from typing import List
import logging
# Import centralized IDs
from src.ui.ids.ids import ResultsIDs

logger = logging.getLogger(__name__)

# Keep individual chart/table creation functions as they are used to build panels

def create_portfolio_value_returns_chart() -> dbc.Card:
    """
    Creates the card containing the portfolio value/returns chart and toggle buttons.
    Labels updated to USD / %.
    """
    logger.debug("Creating portfolio value/returns chart card structure.")
    return dbc.Card([
        dbc.CardHeader(
            dbc.Row([
                dbc.Col("Portfolio Performance", width="auto"),
                dbc.Col(
                    dbc.ButtonGroup([
                        # --- UPDATED LABELS ---
                        dbc.Button("USD", id=ResultsIDs.PORTFOLIO_VALUE_BUTTON, color="primary", outline=False, size="sm", n_clicks=0),
                        dbc.Button("%", id=ResultsIDs.PORTFOLIO_RETURNS_BUTTON, color="primary", outline=True, size="sm", n_clicks=0),
                        # --- END UPDATED LABELS ---
                    ], size="sm"),
                    width="auto"
                )
            ], justify="between", align="center")
        ),
        dbc.CardBody([
            dcc.Loading(
                id=ResultsIDs.PORTFOLIO_CHART_LOADING,
                children=dcc.Graph(
                    id=ResultsIDs.PORTFOLIO_CHART,
                    # config={'displayModeBar': False} # Optional: hide mode bar
                ),
                type="circle"
            )
        ])
    ], className="mb-3") # Use mb-3 for tighter spacing in vertical stack

def create_drawdown_chart() -> dbc.Card:
    """
    Creates the card containing the drawdown chart.
    """
    logger.debug("Creating drawdown chart card structure.")
    return dbc.Card([
        dbc.CardHeader("Drawdown"),
        dbc.CardBody([
            dcc.Loading(
                id=ResultsIDs.DRAWDOWN_CHART_LOADING, # Unique ID for drawdown loading
                children=dcc.Graph(
                    id=ResultsIDs.DRAWDOWN_CHART,
                    # config={'displayModeBar': False}
                ),
                type="circle"
            )
        ])
    ], className="mb-3") # Use mb-3

def create_monthly_returns_heatmap() -> dbc.Card:
    """
    Creates the card containing the monthly returns heatmap.
    """
    logger.debug("Creating monthly returns heatmap card structure.")
    return dbc.Card([
        dbc.CardHeader("Monthly Returns Heatmap"),
        dbc.CardBody([
            dcc.Loading(
                id=ResultsIDs.MONTHLY_RETURNS_HEATMAP_LOADING, # Corrected ID
                children=dcc.Graph(
                    id=ResultsIDs.MONTHLY_RETURNS_HEATMAP,
                    # config={'displayModeBar': False}
                ),
                type="circle"
            )
        ])
    ], className="mb-3") # Use mb-3

def create_trades_table() -> dbc.Card:
    """
    Creates card with a container for the trades table (dash_table.DataTable).
    The table itself will be generated by a callback.
    """
    logger.debug("Creating trades table card structure.")
    return dbc.Card([
        dbc.CardHeader("Trade History"),
        dbc.CardBody([
            dcc.Loading(
                id=ResultsIDs.TRADES_TABLE_LOADING, # Corrected ID
                # Container for the DataTable, populated by the callback
                children=html.Div(id=ResultsIDs.TRADES_TABLE_CONTAINER, children=[
                    # Initial placeholder message
                    html.Div("Run a backtest to view trade history.")
                ]),
                type="circle"
            )
        ])
    ], className="mb-3") # Use mb-3

def create_signals_chart() -> dbc.Card:
    """
    Creates the card containing the signals chart and ticker selector.
    """
    logger.debug("Creating signals chart card structure.")
    return dbc.Card([
        dbc.CardHeader(
            dbc.Row([
                dbc.Col("Signals & Price Action", width="auto"),
                dbc.Col(
                    dbc.Select(
                        id=ResultsIDs.SIGNALS_TICKER_SELECTOR,
                        options=[], # Populated by callback
                        placeholder="Select Ticker...",
                        size="sm"
                    ),
                    width=4 # Adjust width as needed
                )
            ], justify="between", align="center")
        ),
        dbc.CardBody([
            dcc.Loading(
                id=ResultsIDs.SIGNALS_CHART_LOADING,
                children=dcc.Graph(
                    id=ResultsIDs.SIGNALS_CHART,
                    # config={'displayModeBar': False}
                ),
                type="circle"
            )
        ])
    ], className="mb-3") # Use mb-3


# --- NEW: Center Panel Layout ---
def create_center_panel_layout() -> html.Div:
    """
    Creates the layout for the center panel containing all charts and the table.
    Arranges components vertically as requested.
    """
    logger.debug("Creating center panel layout.")
    return html.Div([
        # --- MODIFIED: Loading Overlay ---
        html.Div(
            id="loading-overlay", # New ID for the overlay
            children=[
                html.Div(id=ResultsIDs.BACKTEST_STATUS_MESSAGE, className="text-center my-2", style={"color": "white"}), # Ensure text is visible
                html.Div([
                    dbc.Progress(id=ResultsIDs.BACKTEST_PROGRESS_BAR, value=0, striped=True, animated=True, className="mb-3", style={"height": "20px"})
                ], id=ResultsIDs.BACKTEST_PROGRESS_BAR_CONTAINER, style={"width": "75%", "textAlign": "center"}) # Centering handled by parent flex
            ],
            style={ # Style for the overlay
                "display": "none", # Initially hidden
                "position": "absolute",
                "top": "0", "left": "0", "right": "0", "bottom": "0",
                "backgroundColor": "rgba(18, 18, 18, 0.85)", # Dark, slightly transparent background
                "zIndex": "1050", # High z-index to be on top of other content
                "display": "flex", # Using flex to center children
                "flexDirection": "column",
                "alignItems": "center",
                "justifyContent": "center"
            }
        ),
        # --- END MODIFIED: Loading Overlay ---
        # New div to wrap actual results, initially hidden
        html.Div(id=ResultsIDs.RESULTS_AREA_WRAPPER, children=[
            create_portfolio_value_returns_chart(),
            create_drawdown_chart(),
            create_monthly_returns_heatmap(),
            create_signals_chart(),
            create_trades_table()
        ], style={'display': 'none'}) # Initially hidden
    ])

# --- NEW: Right Panel Layout ---
def create_right_panel_layout() -> html.Div:
    """
    Creates the layout for the right panel containing performance and trade metrics.
    Uses two cards with specific IDs for callback targeting.
    """
    logger.debug("Creating right panel layout.")
    return html.Div([
        dbc.Card([
            dbc.CardHeader("Performance Overview"),
            dbc.CardBody(
                # Container for performance metrics, populated by callback
                # Use g-2 for smaller gutters between metric cards
                dbc.Row(id=ResultsIDs.PERFORMANCE_METRICS_CONTAINER, className="g-2")
            )
        ], className="mb-3"),

        dbc.Card([
            dbc.CardHeader("Trade Statistics"),
            dbc.CardBody(
                # Container for trade statistics, populated by callback
                # Use g-2 for smaller gutters between metric cards
                dbc.Row(id=ResultsIDs.TRADE_METRICS_CONTAINER, className="g-2")
            )
        ], className="mb-3")
    ])